# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых
# трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
# проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с
# кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.

# Задача 2 из урока 3.
# Во втором массиве сохранить индексы четных элементов первого массива.
# Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, второй массив надо заполнить значениями 0, 3, 4, 5
# (помните, что индексация начинается с нуля), т. к. именно в этих позициях первого массива стоят четные числа.

import random
import sys

# Число элементов в массиве
N = 100


# Вычисление размера переменных
def get_size(local_data):
    brackets = {list:  ('[', ']'),
                tuple: ('(', ')')}

    print('*'*50)
    print('Выделение памяти для переменных:')
    for name, value in local_data.items():
        t = type(value)
        if t in (list, tuple):
            print(f'{name} ({t}): {sys.getsizeof(value)}\t', end='')
            print(brackets[t][0], end='')
            for v in value:
                print(f'{v}: {sys.getsizeof(v)}, ', end='')
            print(f'\b\b{brackets[t][1]}')
        else:
            print(f'{name} ({t}): {sys.getsizeof(value)}')
    print('*'*50)


# Версия со списком
def ver_1(rand):
    a = list(rand)
    b = []

    for i, v in enumerate(a):
        if v % 2 == 0:
            b.append(i)

    print(f'b = {b}')
    get_size(locals())


# Версия с кортежем
def ver_2(rand):
    a = tuple(rand)
    b = []

    for i, v in enumerate(a):
        if v % 2 == 0:
            b.append(i)

    print(f'b = {b}')
    get_size(locals())


# Версия с генератором-кортежем
def ver_3(rand):
    a = (i for i in rand)
    b = []

    for i, v in enumerate(a):
        if v % 2 == 0:
            b.append(i)

    print(f'b = {b}')
    get_size(locals())


if __name__ == '__main__':
    print(sys.version, sys.platform)

    r = [random.randint(0, 10) for _ in range(N)]
    print(f'Исходный массив = {r}')

    print('Версия 1')
    ver_1(r)
    print('Версия 2')
    ver_2(r)
    print('Версия 3')
    ver_3(r)

###############################################################################################################
# Запуск для N = 10
###############################################################################################################
# 3.7.4 (default, Aug 13 2019, 20:35:49)
# [GCC 7.3.0] linux
# Исходный массив = [2, 5, 2, 3, 6, 1, 9, 7, 6, 6]
# Версия 1
# b = [0, 2, 4, 8, 9]
# **************************************************
# Выделение памяти для переменных:
# rand (<class 'list'>): 200	[2: 28, 5: 28, 2: 28, 3: 28, 6: 28, 1: 28, 9: 28, 7: 28, 6: 28, 6: 28]
# a (<class 'list'>): 208	[2: 28, 5: 28, 2: 28, 3: 28, 6: 28, 1: 28, 9: 28, 7: 28, 6: 28, 6: 28]
# b (<class 'list'>): 136	[0: 24, 2: 28, 4: 28, 8: 28, 9: 28]
# i (<class 'int'>): 28
# v (<class 'int'>): 28
# **************************************************
# Версия 2
# b = [0, 2, 4, 8, 9]
# **************************************************
# Выделение памяти для переменных:
# rand (<class 'list'>): 200	[2: 28, 5: 28, 2: 28, 3: 28, 6: 28, 1: 28, 9: 28, 7: 28, 6: 28, 6: 28]
# a (<class 'tuple'>): 136	(2: 28, 5: 28, 2: 28, 3: 28, 6: 28, 1: 28, 9: 28, 7: 28, 6: 28, 6: 28)
# b (<class 'list'>): 136	[0: 24, 2: 28, 4: 28, 8: 28, 9: 28]
# i (<class 'int'>): 28
# v (<class 'int'>): 28
# **************************************************
# Версия 3
# b = [0, 2, 4, 8, 9]
# **************************************************
# Выделение памяти для переменных:
# rand (<class 'list'>): 200	[2: 28, 5: 28, 2: 28, 3: 28, 6: 28, 1: 28, 9: 28, 7: 28, 6: 28, 6: 28]
# a (<class 'generator'>): 128
# b (<class 'list'>): 136	[0: 24, 2: 28, 4: 28, 8: 28, 9: 28]
# i (<class 'int'>): 28
# v (<class 'int'>): 28
# **************************************************

###############################################################################################################
# Запуск для N = 100
###############################################################################################################
# 3.7.4 (default, Aug 13 2019, 20:35:49)
# [GCC 7.3.0] linux
# Исходный массив = [0, 2, 5, 5, 5, 4, 4, 10, 6, 0, 2, 4, 8, 5, 9, 6, 6, 10, 2, 4, 8, 4, 0, 0, 8, 5, 3, 9, 3, 5, 9, 1, 3, 10, 9, 5, 5, 4, 8, 9, 3, 9, 2, 4, 5, 0, 7, 3, 2, 1, 8, 8, 10, 3, 4, 7, 2, 8, 7, 1, 5, 1, 2, 4, 4, 5, 8, 0, 10, 1, 7, 0, 1, 10, 6, 7, 4, 5, 9, 4, 0, 0, 9, 5, 2, 3, 10, 6, 7, 6, 3, 6, 4, 4, 4, 3, 5, 5, 6, 7]
# Версия 1
# b = [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 37, 38, 42, 43, 45, 48, 50, 51, 52, 54, 56, 57, 62, 63, 64, 66, 67, 68, 71, 73, 74, 76, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 98]
# **************************************************
# Выделение памяти для переменных:
# rand (<class 'list'>): 920	[0: 24, 2: 28, 5: 28, 5: 28, 5: 28, 4: 28, 4: 28, 10: 28, 6: 28, 0: 24, 2: 28, 4: 28, 8: 28, 5: 28, 9: 28, 6: 28, 6: 28, 10: 28, 2: 28, 4: 28, 8: 28, 4: 28, 0: 24, 0: 24, 8: 28, 5: 28, 3: 28, 9: 28, 3: 28, 5: 28, 9: 28, 1: 28, 3: 28, 10: 28, 9: 28, 5: 28, 5: 28, 4: 28, 8: 28, 9: 28, 3: 28, 9: 28, 2: 28, 4: 28, 5: 28, 0: 24, 7: 28, 3: 28, 2: 28, 1: 28, 8: 28, 8: 28, 10: 28, 3: 28, 4: 28, 7: 28, 2: 28, 8: 28, 7: 28, 1: 28, 5: 28, 1: 28, 2: 28, 4: 28, 4: 28, 5: 28, 8: 28, 0: 24, 10: 28, 1: 28, 7: 28, 0: 24, 1: 28, 10: 28, 6: 28, 7: 28, 4: 28, 5: 28, 9: 28, 4: 28, 0: 24, 0: 24, 9: 28, 5: 28, 2: 28, 3: 28, 10: 28, 6: 28, 7: 28, 6: 28, 3: 28, 6: 28, 4: 28, 4: 28, 4: 28, 3: 28, 5: 28, 5: 28, 6: 28, 7: 28]
# a (<class 'list'>): 1016	[0: 24, 2: 28, 5: 28, 5: 28, 5: 28, 4: 28, 4: 28, 10: 28, 6: 28, 0: 24, 2: 28, 4: 28, 8: 28, 5: 28, 9: 28, 6: 28, 6: 28, 10: 28, 2: 28, 4: 28, 8: 28, 4: 28, 0: 24, 0: 24, 8: 28, 5: 28, 3: 28, 9: 28, 3: 28, 5: 28, 9: 28, 1: 28, 3: 28, 10: 28, 9: 28, 5: 28, 5: 28, 4: 28, 8: 28, 9: 28, 3: 28, 9: 28, 2: 28, 4: 28, 5: 28, 0: 24, 7: 28, 3: 28, 2: 28, 1: 28, 8: 28, 8: 28, 10: 28, 3: 28, 4: 28, 7: 28, 2: 28, 8: 28, 7: 28, 1: 28, 5: 28, 1: 28, 2: 28, 4: 28, 4: 28, 5: 28, 8: 28, 0: 24, 10: 28, 1: 28, 7: 28, 0: 24, 1: 28, 10: 28, 6: 28, 7: 28, 4: 28, 5: 28, 9: 28, 4: 28, 0: 24, 0: 24, 9: 28, 5: 28, 2: 28, 3: 28, 10: 28, 6: 28, 7: 28, 6: 28, 3: 28, 6: 28, 4: 28, 4: 28, 4: 28, 3: 28, 5: 28, 5: 28, 6: 28, 7: 28]
# b (<class 'list'>): 536	[0: 24, 1: 28, 5: 28, 6: 28, 7: 28, 8: 28, 9: 28, 10: 28, 11: 28, 12: 28, 15: 28, 16: 28, 17: 28, 18: 28, 19: 28, 20: 28, 21: 28, 22: 28, 23: 28, 24: 28, 33: 28, 37: 28, 38: 28, 42: 28, 43: 28, 45: 28, 48: 28, 50: 28, 51: 28, 52: 28, 54: 28, 56: 28, 57: 28, 62: 28, 63: 28, 64: 28, 66: 28, 67: 28, 68: 28, 71: 28, 73: 28, 74: 28, 76: 28, 79: 28, 80: 28, 81: 28, 84: 28, 86: 28, 87: 28, 89: 28, 91: 28, 92: 28, 93: 28, 94: 28, 98: 28]
# i (<class 'int'>): 28
# v (<class 'int'>): 28
# **************************************************
# Версия 2
# b = [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 37, 38, 42, 43, 45, 48, 50, 51, 52, 54, 56, 57, 62, 63, 64, 66, 67, 68, 71, 73, 74, 76, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 98]
# **************************************************
# Выделение памяти для переменных:
# rand (<class 'list'>): 920	[0: 24, 2: 28, 5: 28, 5: 28, 5: 28, 4: 28, 4: 28, 10: 28, 6: 28, 0: 24, 2: 28, 4: 28, 8: 28, 5: 28, 9: 28, 6: 28, 6: 28, 10: 28, 2: 28, 4: 28, 8: 28, 4: 28, 0: 24, 0: 24, 8: 28, 5: 28, 3: 28, 9: 28, 3: 28, 5: 28, 9: 28, 1: 28, 3: 28, 10: 28, 9: 28, 5: 28, 5: 28, 4: 28, 8: 28, 9: 28, 3: 28, 9: 28, 2: 28, 4: 28, 5: 28, 0: 24, 7: 28, 3: 28, 2: 28, 1: 28, 8: 28, 8: 28, 10: 28, 3: 28, 4: 28, 7: 28, 2: 28, 8: 28, 7: 28, 1: 28, 5: 28, 1: 28, 2: 28, 4: 28, 4: 28, 5: 28, 8: 28, 0: 24, 10: 28, 1: 28, 7: 28, 0: 24, 1: 28, 10: 28, 6: 28, 7: 28, 4: 28, 5: 28, 9: 28, 4: 28, 0: 24, 0: 24, 9: 28, 5: 28, 2: 28, 3: 28, 10: 28, 6: 28, 7: 28, 6: 28, 3: 28, 6: 28, 4: 28, 4: 28, 4: 28, 3: 28, 5: 28, 5: 28, 6: 28, 7: 28]
# a (<class 'tuple'>): 856	(0: 24, 2: 28, 5: 28, 5: 28, 5: 28, 4: 28, 4: 28, 10: 28, 6: 28, 0: 24, 2: 28, 4: 28, 8: 28, 5: 28, 9: 28, 6: 28, 6: 28, 10: 28, 2: 28, 4: 28, 8: 28, 4: 28, 0: 24, 0: 24, 8: 28, 5: 28, 3: 28, 9: 28, 3: 28, 5: 28, 9: 28, 1: 28, 3: 28, 10: 28, 9: 28, 5: 28, 5: 28, 4: 28, 8: 28, 9: 28, 3: 28, 9: 28, 2: 28, 4: 28, 5: 28, 0: 24, 7: 28, 3: 28, 2: 28, 1: 28, 8: 28, 8: 28, 10: 28, 3: 28, 4: 28, 7: 28, 2: 28, 8: 28, 7: 28, 1: 28, 5: 28, 1: 28, 2: 28, 4: 28, 4: 28, 5: 28, 8: 28, 0: 24, 10: 28, 1: 28, 7: 28, 0: 24, 1: 28, 10: 28, 6: 28, 7: 28, 4: 28, 5: 28, 9: 28, 4: 28, 0: 24, 0: 24, 9: 28, 5: 28, 2: 28, 3: 28, 10: 28, 6: 28, 7: 28, 6: 28, 3: 28, 6: 28, 4: 28, 4: 28, 4: 28, 3: 28, 5: 28, 5: 28, 6: 28, 7: 28)
# b (<class 'list'>): 536	[0: 24, 1: 28, 5: 28, 6: 28, 7: 28, 8: 28, 9: 28, 10: 28, 11: 28, 12: 28, 15: 28, 16: 28, 17: 28, 18: 28, 19: 28, 20: 28, 21: 28, 22: 28, 23: 28, 24: 28, 33: 28, 37: 28, 38: 28, 42: 28, 43: 28, 45: 28, 48: 28, 50: 28, 51: 28, 52: 28, 54: 28, 56: 28, 57: 28, 62: 28, 63: 28, 64: 28, 66: 28, 67: 28, 68: 28, 71: 28, 73: 28, 74: 28, 76: 28, 79: 28, 80: 28, 81: 28, 84: 28, 86: 28, 87: 28, 89: 28, 91: 28, 92: 28, 93: 28, 94: 28, 98: 28]
# i (<class 'int'>): 28
# v (<class 'int'>): 28
# **************************************************
# Версия 3
# b = [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 37, 38, 42, 43, 45, 48, 50, 51, 52, 54, 56, 57, 62, 63, 64, 66, 67, 68, 71, 73, 74, 76, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 98]
# **************************************************
# Выделение памяти для переменных:
# rand (<class 'list'>): 920	[0: 24, 2: 28, 5: 28, 5: 28, 5: 28, 4: 28, 4: 28, 10: 28, 6: 28, 0: 24, 2: 28, 4: 28, 8: 28, 5: 28, 9: 28, 6: 28, 6: 28, 10: 28, 2: 28, 4: 28, 8: 28, 4: 28, 0: 24, 0: 24, 8: 28, 5: 28, 3: 28, 9: 28, 3: 28, 5: 28, 9: 28, 1: 28, 3: 28, 10: 28, 9: 28, 5: 28, 5: 28, 4: 28, 8: 28, 9: 28, 3: 28, 9: 28, 2: 28, 4: 28, 5: 28, 0: 24, 7: 28, 3: 28, 2: 28, 1: 28, 8: 28, 8: 28, 10: 28, 3: 28, 4: 28, 7: 28, 2: 28, 8: 28, 7: 28, 1: 28, 5: 28, 1: 28, 2: 28, 4: 28, 4: 28, 5: 28, 8: 28, 0: 24, 10: 28, 1: 28, 7: 28, 0: 24, 1: 28, 10: 28, 6: 28, 7: 28, 4: 28, 5: 28, 9: 28, 4: 28, 0: 24, 0: 24, 9: 28, 5: 28, 2: 28, 3: 28, 10: 28, 6: 28, 7: 28, 6: 28, 3: 28, 6: 28, 4: 28, 4: 28, 4: 28, 3: 28, 5: 28, 5: 28, 6: 28, 7: 28]
# a (<class 'generator'>): 128
# b (<class 'list'>): 536	[0: 24, 1: 28, 5: 28, 6: 28, 7: 28, 8: 28, 9: 28, 10: 28, 11: 28, 12: 28, 15: 28, 16: 28, 17: 28, 18: 28, 19: 28, 20: 28, 21: 28, 22: 28, 23: 28, 24: 28, 33: 28, 37: 28, 38: 28, 42: 28, 43: 28, 45: 28, 48: 28, 50: 28, 51: 28, 52: 28, 54: 28, 56: 28, 57: 28, 62: 28, 63: 28, 64: 28, 66: 28, 67: 28, 68: 28, 71: 28, 73: 28, 74: 28, 76: 28, 79: 28, 80: 28, 81: 28, 84: 28, 86: 28, 87: 28, 89: 28, 91: 28, 92: 28, 93: 28, 94: 28, 98: 28]
# i (<class 'int'>): 28
# v (<class 'int'>): 28
# **************************************************

###############################################################################################################
# Выводы
###############################################################################################################
# В данной задаче определяем влияние на память в зависимости от того как определён массив "a".
# Для N = 10
# В версии 1 "a" используется в виде списка и занимает 208 байт.
# В версии 2 "a" используется в виде кортежа и занимает 136 байт.
# В версии 3 "a" используется в виде генератора-кортежа и занимает 128 байт.
# Для N = 100
# В версии 1 "a" используется в виде списка и занимает 1016 байт.
# В версии 2 "a" используется в виде кортежа и занимает 856 байт.
# В версии 3 "a" используется в виде генератора-кортежа и занимает 128 байт.
# Больше всего памяти занимает изменяемый массив (список), статический массив (кортеж) занимает памяти чуть меньше,
# но меньше всего занимает памяти генератор. Генератор занимает меньше места (причём размер выделенной памяти
# постоянен), т.к. это особенность реализации генераторов - они не выделяют сразу всю необходимую память для массива,
# а на каждой итерации используется только один номер из генерируемой последовательности.
# Поэтому, с точки зрения экономии памяти, лучшим вариантом будет вариант 3 с генератором.
